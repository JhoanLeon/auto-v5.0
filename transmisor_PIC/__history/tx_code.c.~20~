#include <16F877A.h>

#fuses    NOWDT
#fuses    XT
#fuses    PUT
#fuses    NOPROTECT
#fuses    NODEBUG
#fuses    NOBROWNOUT
#fuses    NOLVP
#fuses    NOCPD
#fuses    NOWRT

#device adc=8

#use standard_io(D)

#use delay(clock=4000000,crystal)

#include "lib_rf2gh4_10.h"

#byte porta=0x05
#byte portb=0x06

#int_ext                     // Esta rutina está para un futuro si haces comunicaciones bidireccionales.

int time = 200;              // Tiempo para la secuencia de inicio
int8 ret2;                   // Variable para la respuesta de emisión 
   

void int_RB0()               // No tiene efecto en el programa principal, ya que sólo emite.
{                            // Se encargaría de la recepción de datos.
   int8 ret1;
  
   ret1 = RF_RECEIVE();
   if ( (ret1 == 0) || (ret1 == 1) )
   {
      do
      { 
         ret1 = RF_RECEIVE();
      }  while ( (ret1 == 0) || (ret1 == 1) );
   } 
}


void main()
{  
   port_b_pullups(FALSE);         // Configura todo digital
   setup_adc_ports(NO_ANALOGS);
   setup_adc(ADC_CLOCK_DIV_2);
   setup_spi(SPI_SS_DISABLED);
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1);
   setup_timer_1(T1_DISABLED);
   setup_timer_2(T2_DISABLED,0,1);
   setup_comparator(NC_NC_NC_NC);
   setup_vref(FALSE);

   RF_INT_EN();              // Habilitar interrupción RB0/INT.
   RF_CONFIG_SPI();          // Configurar módulo SPI del PIC.
   RF_CONFIG(0x40,0x06);     // Configurar módulo RF canal y dirección de recepción. Para recibir datos en el emisor tiene la dirección 0x06.
   RF_ON();                  // Activar el módulo RF.
  
   delay_ms(5);              // Le damos un mínimo de 2.5 milisegundos para que se ponga en marcha.
  
   set_tris_a(0b111111);     // Todo el puerto A como entradas.
   
   output_high(PIN_D1);      // Secuencia de inicio
   delay_ms(time);
   output_low(PIN_D1);
   delay_ms(time);
   output_high(PIN_D1);
   delay_ms(time);
   output_low(PIN_D1);
   delay_ms(time);
   output_high(PIN_D1);
   delay_ms(time);
   output_low(PIN_D1);
   
   while(true)
   {
      RF_DATA[0] = porta;      // Cargamos el dato que se quiere enviar en RF_DATA[0].
      RF_DIR = 0x08;           // Dirección del receptor.
      ret2 = RF_SEND();        // Envia el dato de RF_DATA y guarda la respuesta de envío en ret2.
  
      if(ret2==0)              //Envio realizado y ACK recibido
      {
         //output_high(PIN_D0);
      }
      else if(ret2==1)         //Envio realizado y ACK no recibido
      {
         //output_high(PIN_D1);
      }
      else                     //Envio no realizado
      {
         //output_high(PIN_D2);
      }
      
      //output_low(PIN_D0);
      //output_low(PIN_D1);
      //output_low(PIN_D2);
      //delay_ms(time);
   }
}
